<Configuration
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../FrankConfig.xsd"
>
  <Adapter name="IngAuthorizationAdapter">
    <Receiver name="IngAuthorizationReceiver">
      <ApiListener name="IngAuthorizationRequestListener" uriPattern="ing" headerParams="Location" />
    </Receiver>

    <Pipeline>
      <Exits>
        <Exit name="Success" state="SUCCESS" />
        <Exit name="400" state="ERROR" />
        <Exit name="401" state="ERROR" />
        <Exit name="500" state="ERROR" />
        <Exit name="ParseError" state="ERROR" />
      </Exits>

      <!-- Get the application access token -->
      <!--  -->
      <!--  -->
      <!--  -->
      <!--  -->
      <!--  -->

      <!-- fetch the GMT Time from an xslt funcion -->
      <XsltPipe name="GMT Date Getter" storeResultInSessionKey="FormattedDateTime"
        styleSheetName="dateformatter.xsl"
        getInputFromFixedValue="&lt;dummy /&gt;">
      </XsltPipe>

      <!-- Store the content of the sandbox certificate and key in a session key-->
      <LocalFileSystemPipe name="ReadSigningCertificate"
        action="read"
        filename="${configurations.directory}/IngConfiguration/certs/example_client_signing.cer"
        storeResultInSessionKey="SigningCertificate" />
      <LocalFileSystemPipe name="ReadSigningKey"
        action="read"
        filename="${configurations.directory}/IngConfiguration/certs/example_client_signing.key"
        storeResultInSessionKey="SigningKey" />

      <!-- Create hash the payload with sha256 -->
      <ChecksumPipe
        name="SHA256"
        type="SHA256"
        getInputFromFixedValue="grant_type=client_credentials"
        storeResultInSessionKey="HashedPayload" />
      <!-- convert the hexstring to base64 with a  -->
      <SenderPipe name="HexStringToBase64" storeResultInSessionKey="PayloadDigest">
        <JavascriptSender
          jsFileName="JavaScript/HexStringToBase64.js"
          jsFunctionName="hexToBase64">
          <Param name="hexString" sessionKey="HashedPayload" />
        </JavascriptSender>
      </SenderPipe>

      <!-- Create the signature string -->
      <FixedResultPipe
        name="CreateSignatureString"
        storeResultInSessionKey="SignatureString"
        returnString="SignatureString"
        replaceFixedParams="true">
        <Param name="SignatureString" 
          pattern="(request-target): post /oauth2/token&#xa;date: {FormattedDateTime}&#xa;digest: SHA-256={PayloadDigest}" />
      </FixedResultPipe>
      <!-- Sign the signature -->
      <SignaturePipe
        name="SignatureStringSigner"
        keystore="/certs/signing.p12"
        keystoreAlias="ing"
        keystorePassword="Password123!"
        storeResultInSessionKey="Signature"
        getInputFromSessionKey="SignatureString"
      />

      <!-- Request an authorization token -->
      <SenderPipe name="IngAuthorizationRequest">
        <HttpSender
          url="https://api.sandbox.ing.com/oauth2/token"
          methodType="POST"
          contentType="application/x-www-form-urlencoded"
          postType="URLENCODED"
          headersParams="Accept, Content-Type, Digest, Date, TPP-Signature-Certificate, authorization"
          treatInputMessageAsParameters="false"
          keystore="/certs/tls.p12"
          keystoreAlias="ing"
          keystorePassword="Password123!" />
        <Param name="Date" sessionKey="FormattedDateTime" />
        <Param name="Digest" pattern="SHA-256={PayloadDigest}" />
        <Param name="TPP-Signature-Certificate" sessionKey="SigningCertificate" />
        <Param name="authorization"
          pattern='Signature keyId="SN=546212fb",algorithm="rsa-sha256",headers="(request-target) date digest",signature="{Signature}"' />
        <Param name="Accept" value="application/json" />
        <Param name="Content-Type" value="application/x-www-form-urlencoded" />
        <Param name="grant_type" value="client_credentials" />

        <Forward name="400" path="400" />
        <Forward name="401" path="401" />
        <Forward name="500" path="500" />
      </SenderPipe>

      <!-- Parse the response -->
      <JsonValidatorPipe name="IngAuthorizationTokenResponseValidator"
        schema="schemas/ingAuthorizationTokenResponse.json">
        <Forward name="failure" path="ParseError" />
      </JsonValidatorPipe>

      <!-- Extract and store required data from the response -->
      <JsonPipe name="JsonToXml" direction="JSON2XML" />
      <XsltPipe name="TokenExtractor" xpathExpression="/root/access_token"
        storeResultInSessionKey="AccessToken" preserveInput="true" />
      <XsltPipe name="ClientIdExtractor" xpathExpression="/root/client_id"
        storeResultInSessionKey="ClientId" />

      <!-- Request url for the authorization server -->
      <!--  -->
      <!--  -->
      <!--  -->
      <!--  -->
      <!--  -->

      <!-- fetch the GMT Time from an xslt funcion -->
      <XsltPipe name="GMT Date Getter UrlRequest" storeResultInSessionKey="FormattedDateTime"
        styleSheetName="dateformatter.xsl"
        getInputFromFixedValue="&lt;dummy /&gt;">
      </XsltPipe>

      <!-- Create hash the payload with sha256 -->
      <ChecksumPipe
        name="UrlRequest SHA256"
        type="SHA256"
        getInputFromFixedValue=""
        storeResultInSessionKey="HashedEmptyPayload" />
      <!-- convert the hexstring to base64 with a  -->
      <SenderPipe name="EmptyHexStringToBase64" storeResultInSessionKey="EmptyPayloadDigest">
        <JavascriptSender
          jsFileName="JavaScript/HexStringToBase64.js"
          jsFunctionName="hexToBase64">
          <Param name="hexString" sessionKey="HashedEmptyPayload" />
        </JavascriptSender>
      </SenderPipe>

      <!-- Create the signature string -->
      <!-- Keep in mind that encoding occurs on the request url, so in order to keep -->
      <!-- the signature the same as the request, the url has to be pre-encoded -->
      <FixedResultPipe
        name="CreateEmptySignatureString"
        storeResultInSessionKey="SignatureString"
        returnString="SignatureString"
        replaceFixedParams="true">
        <Param name="SignatureString"
          pattern="(request-target): get /oauth2/authorization-server-url?scope=payment-accounts%3Abalances%3Aview&amp;redirect_uri=https%3A%2F%2Fwww.example.com&amp;country_code=NL&#xa;date: {FormattedDateTime}&#xa;digest: SHA-256=47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=" />
      </FixedResultPipe>

      <SignaturePipe
        name="UrlRequestSignatureStringSigner"
        keystore="/certs/signing.p12"
        keystoreAlias="ing"
        keystorePassword="Password123!"
        storeResultInSessionKey="Signature"
        getInputFromSessionKey="SignatureString"
      />

      <!-- request a url -->
      <!-- url="https://api.sandbox.ing.com/oauth2/authorization-server-url" -->
      <SenderPipe name="IngUrlRequest">
        <HttpSender
          url="https://api.sandbox.ing.com/oauth2/authorization-server-url"
          methodType="GET"
          treatInputMessageAsParameters="false"
          headersParams="Accept, Digest, Date, user-agent, Authorization, Signature" />

        <Param name="scope" value="payment-accounts:balances:view" />
        <Param name="redirect_uri" value="https://www.example.com" />
        <Param name="country_code" value="NL" />

        <Param name="Date" sessionKey="FormattedDateTime" />
        <Param name="user-agent" value="frank2openbanking 0.0.1" />
        <Param name="Digest" pattern="SHA-256=47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=" />
        <Param name="Signature"
          pattern='keyId="{ClientId}",algorithm="rsa-sha256",headers="(request-target) date digest",signature="{Signature}"' />
        <Param name="Authorization" pattern="Bearer {AccessToken}" />
        <Param name="Accept" value="application/json" />

        <Forward name="400" path="400" />
        <Forward name="401" path="401" />
        <Forward name="500" path="500" />
      </SenderPipe>

      <!-- Parse the response -->
      <JsonValidatorPipe name="IngUrlRequestResponseValidator"
        schema="schemas/ingUrlRequestResponse.json">
        <Forward name="failure" path="ParseError" />
      </JsonValidatorPipe>

      <!-- Extract and store required data from the response -->
      <JsonPipe name="JsonToXmlUrlRequest" direction="JSON2XML" />
      <XsltPipe name="UrlExtractor" xpathExpression="/root/location"
        storeResultInSessionKey="location">
      </XsltPipe>

    </Pipeline>
  </Adapter>
</Configuration>